// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        String @id @default(cuid())
  username  String @unique
  email     String  @unique
  clerkId String? @unique
  name    String?
  bio String?
  image   String?
  location String?
  website String?
  createdAt DateTime @default(now()) //member since 2020
  updatedAt DateTime @updatedAt

  //Relations: one to many
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follows[] @relation("userFollowers") // users who follow this user
  following Follows[] @relation("userFollowing") // users this user follows
  notifications Notification[] @relation("userNotifications") //notifications received by a user
  notificationsCreated Notification[] @relation("notificationCreator") //notifications created by a user


}
model Post{
  id        String @id @default(cuid())
  authorId String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  //Relations
  author User @relation(fields: [authorId], references: [id] , onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[] 
}


model Comment{
  id        String @id @default(cuid())
  postId String
  authorId String
  content   String
  createdAt DateTime @default(now())
  notifications Notification[] //notifications related to this comment
 

  //Relations
  post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id] , onDelete: Cascade)
 @@index([authorId, postId]) //composite index for faster queries 
}


model Like{
  id        String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  //Relations
  post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
 user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
 @@unique([ userId,postId]) //composite unique index to prevent duplicate likes
 @@index([userId, postId]) //composite index for faster queries
 
}
model Notification{
  id       String @id @default(cuid())
  type     NotificationType
  userId String
  creatorId String
  postId String?
  commentId String?
  createdAt DateTime @default(now())
  read      Boolean @default(false) //if the notification has been read or not

  //Relations
  user User @relation("userNotifications",fields: [userId], references: [id] , onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id] , onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id] , onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id] , onDelete: Cascade)
  @@index([userId, createdAt]) //composite index for faster queries
}
enum NotificationType{
  FOLLOW
  LIKE
  COMMENT

}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("userFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("userFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@id([followerId,followingId]) 
}
